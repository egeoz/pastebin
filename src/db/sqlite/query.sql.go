// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package sqlite

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
insert into entries (
  uuid, title, content, content_type, is_encrypted, insert_date
) VALUES (
  ?, ?, ?, ?, ?, ?
)
returning id, uuid, title, content, content_type, is_encrypted, insert_date
`

type CreateEntryParams struct {
	Uuid        string
	Title       string
	Content     string
	ContentType string
	IsEncrypted string
	InsertDate  string
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry,
		arg.Uuid,
		arg.Title,
		arg.Content,
		arg.ContentType,
		arg.IsEncrypted,
		arg.InsertDate,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Title,
		&i.Content,
		&i.ContentType,
		&i.IsEncrypted,
		&i.InsertDate,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
delete from entries
where uuid = ?
`

func (q *Queries) DeleteEntry(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, uuid)
	return err
}

const getEntry = `-- name: GetEntry :one
select id, uuid, title, content, content_type, is_encrypted, insert_date from entries
where uuid = ? limit 1
`

func (q *Queries) GetEntry(ctx context.Context, uuid string) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntry, uuid)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.Uuid,
		&i.Title,
		&i.Content,
		&i.ContentType,
		&i.IsEncrypted,
		&i.InsertDate,
	)
	return i, err
}
